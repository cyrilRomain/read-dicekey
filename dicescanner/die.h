#pragma once

#include <string>
#include <vector>

std::string DieLetters = "ABCDEFGHIJKLMNOPRSTUVWXYZ";
std::string DieDigits = "123456";

const size_t NumberOfDotsInUndoverline = 11;

const uchar letterIndexTimesSixPlusDigitIndexToOverlineCode[150] = {
  0xe2, 0xec, 0xe4, 0xe7, 0xe9, 0xea, 0xe8, 0xeb, 0xe5, 0xe6, 0xed, 0xee, 0xda, 0xd4, 0xd7, 0xdc, 0xd1, 0xd2, 0xd3, 0xdd, 0xde, 0xd5, 0xd6, 0xd8, 0xc4, 0xca, 0xc9, 0xc2, 0xc1, 0xcc, 0xce, 0xcd, 0xc3, 0xcb, 0xc8, 0xc6, 0xb6, 0xb8, 0xbb, 0xb3, 0xbd, 0xbe, 0xbc, 0xb1, 0xb2, 0xb9, 0xba, 0xb4, 0xa8, 0xa6, 0xa5, 0xae, 0xad, 0xa3, 0xa2, 0xa1, 0xac, 0xa7, 0xa4, 0xaa, 0x9e, 0x9d, 0x96, 0x95, 0x9b, 0x98, 0x9a, 0x99, 0x97, 0x94, 0x9c, 0x92, 0x8e, 0x83, 0x88, 0x8b, 0x85, 0x86, 0x84, 0x87, 0x89, 0x8a, 0x81, 0x82, 0x8c, 0x7e, 0x7d, 0x76, 0x75, 0x7b, 0x78, 0x7a, 0x79, 0x77, 0x74, 0x7c, 0x72, 0x6e, 0x63, 0x68, 0x6b, 0x65, 0x66, 0x64, 0x67, 0x69, 0x6a, 0x61, 0x62, 0x6c, 0x56, 0x58, 0x5b, 0x53, 0x5d, 0x5e, 0x5c, 0x51, 0x52, 0x59, 0x5a, 0x54, 0x48, 0x46, 0x45, 0x4e, 0x4d, 0x43, 0x42, 0x41, 0x4c, 0x47, 0x44, 0x4a, 0x3a, 0x34, 0x37, 0x3c, 0x31, 0x32, 0x33, 0x3d, 0x3e, 0x35, 0x36, 0x38, 0x24, 0x2a, 0x29, 0x22
};

const uchar letterIndexTimesSixPlusDigitIndexToUnderlineCode[150] = {
  0x11, 0x12, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x21, 0x22, 0x23, 0x24, 0x26, 0x27, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x31, 0x32, 0x33, 0x34, 0x35, 0x37, 0x38, 0x39, 0x3a, 0x3c, 0x3d, 0x3e, 0x41, 0x42, 0x43, 0x45, 0x46, 0x47, 0x48, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x58, 0x59, 0x5b, 0x5c, 0x5d, 0x5e, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6d, 0x6e, 0x71, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8d, 0x8e, 0x91, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0xa1, 0xa2, 0xa3, 0xa5, 0xa6, 0xa7, 0xa8, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb8, 0xb9, 0xbb, 0xbc, 0xbd, 0xbe, 0xc1, 0xc2, 0xc3, 0xc4, 0xc6, 0xc7, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xd1, 0xd2, 0xd3, 0xd4
};

const uchar overlineCodeToLetterIndexTimesSixPlusDigitIndex[256] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd4, 0xff, 0xd1, 0xff, 0xff, 0xff, 0xff, 0xd3, 0xd2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc6, 0xc7, 0xc9, 0xc2, 0xcc, 0xcd, 0xc3, 0xce, 0xff, 0xc1, 0xff, 0xc4, 0xca, 0xcb, 0xff, 0xff, 0xb9, 0xb8, 0xb6, 0xbd, 0xb3, 0xb2, 0xbc, 0xb1, 0xff, 0xbe, 0xff, 0xbb, 0xb5, 0xb4, 0xff, 0xff, 0xaa, 0xab, 0xa5, 0xae, 0xff, 0xa1, 0xff, 0xa2, 0xac, 0xad, 0xa3, 0xa8, 0xa6, 0xa7, 0xff, 0xff, 0x9c, 0x9d, 0x93, 0x98, 0x96, 0x97, 0x99, 0x94, 0x9a, 0x9b, 0x95, 0x9e, 0xff, 0x91, 0xff, 0xff, 0xff, 0x8e, 0xff, 0x8b, 0x85, 0x84, 0x8a, 0x87, 0x89, 0x88, 0x86, 0x8d, 0x83, 0x82, 0xff, 0xff, 0x7c, 0x7d, 0x73, 0x78, 0x76, 0x77, 0x79, 0x74, 0x7a, 0x7b, 0x75, 0x7e, 0xff, 0x71, 0xff, 0xff, 0xff, 0x6e, 0xff, 0x6b, 0x65, 0x64, 0x6a, 0x67, 0x69, 0x68, 0x66, 0x6d, 0x63, 0x62, 0xff, 0xff, 0x59, 0x58, 0x56, 0x5d, 0x53, 0x52, 0x5c, 0x51, 0xff, 0x5e, 0xff, 0x5b, 0x55, 0x54, 0xff, 0xff, 0x4a, 0x4b, 0x45, 0x4e, 0xff, 0x41, 0xff, 0x42, 0x4c, 0x4d, 0x43, 0x48, 0x46, 0x47, 0xff, 0xff, 0x35, 0x34, 0x3a, 0x31, 0xff, 0x3e, 0xff, 0x3d, 0x33, 0x32, 0x3c, 0x37, 0x39, 0x38, 0xff, 0xff, 0x26, 0x27, 0x29, 0x22, 0x2c, 0x2d, 0x23, 0x2e, 0xff, 0x21, 0xff, 0x24, 0x2a, 0x2b, 0xff, 0xff, 0xff, 0x11, 0xff, 0x14, 0x1a, 0x1b, 0x15, 0x18, 0x16, 0x17, 0x19, 0x12, 0x1c, 0x1d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const uchar underlineCodeToLetterIndexTimesSixPlusDigitIndex[256] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x11, 0x12, 0xff, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0xff, 0xff, 0xff, 0x21, 0x22, 0x23, 0x24, 0xff, 0x26, 0x27, 0xff, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0xff, 0xff, 0x31, 0x32, 0x33, 0x34, 0x35, 0xff, 0x37, 0x38, 0x39, 0x3a, 0xff, 0x3c, 0x3d, 0x3e, 0xff, 0xff, 0x41, 0x42, 0x43, 0xff, 0x45, 0x46, 0x47, 0x48, 0xff, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0xff, 0xff, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0xff, 0x58, 0x59, 0xff, 0x5b, 0x5c, 0x5d, 0x5e, 0xff, 0xff, 0xff, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0xff, 0x6d, 0x6e, 0xff, 0xff, 0x71, 0xff, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0xff, 0xff, 0xff, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0xff, 0x8d, 0x8e, 0xff, 0xff, 0x91, 0xff, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0xff, 0xff, 0xa1, 0xa2, 0xa3, 0xff, 0xa5, 0xa6, 0xa7, 0xa8, 0xff, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xff, 0xff, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xff, 0xb8, 0xb9, 0xff, 0xbb, 0xbc, 0xbd, 0xbe, 0xff, 0xff, 0xc1, 0xc2, 0xc3, 0xc4, 0xff, 0xc6, 0xc7, 0xff, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xff, 0xff, 0xd1, 0xd2, 0xd3, 0xd4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


struct LetterDigitEncoding {
  uchar underlineEncoding = 0;
  uchar overlineEncoding = 0;
};

static LetterDigitEncoding encodeLetterAndDigit(char letter, char digit) {
  LetterDigitEncoding result;
  size_t letterIndex = DieLetters.find_first_of(letter, 0);
  size_t digitIndex = DieLetters.find_first_of(digit, 0);
  if (letterIndex != std::string::npos || digitIndex != std::string::npos) {
    size_t letterIndexTimesSixPlusDigitIndex = (letterIndex * 6) + digitIndex;
    result.overlineEncoding = letterIndexTimesSixPlusDigitIndexToOverlineCode[letterIndexTimesSixPlusDigitIndex];
    result.underlineEncoding = letterIndexTimesSixPlusDigitIndexToUnderlineCode[letterIndexTimesSixPlusDigitIndex];
  }
  return result;
}

namespace DieDimensionsMm {
  const float size = float(8);
  const float undoverlineLength = float(6);
  const float undoverlineThickness = float(1);
  const float overlineTop = float(0.75);
  const float underlineTop = float(6.25);
  const float undoverlineMarginAtLineStartAndEnd = float(0.5);
  const float undoverlineMarginAlongLength = float(0.25);
  const float textBaselineY = float(5.5);
  const float fontSize = float(5);
  const float textRegionWidth = float(6);
  const float center = float(4);
  const float undoverlineLeftEdge = float(1);
  const float undoverlineFirstDotLeftEdge = float(1.5);
  const float undoverlineDotWidth = float(0.45454545454545453);
  const float undoverlineDotHeight = float(0.5);
  const float centerOfUndoverlineToCenterOfDie = float(2.75);
  const float textRegionHeight = float(3.9);
  const float overlineDotTop = float(1);
  const float underlineDotTop = float(6.5);
};

namespace DieDimensionsFractional {
  const float size = float(1);
  const float center = float(0.5);
  const float centerOfUndoverlineToCenterOfDie = float(0.34375);
  const float undoverlineLength = float(0.75);
  const float undoverlineThickness = float(0.125);
  const float overlineTop = float(0.09375);
  const float underlineTop = float(0.78125);
  const float undoverlineMarginAtLineStartAndEnd = float(0.0625);
  const float undoverlineMarginAlongLength = float(0.03125);
  const float textBaselineY = float(0.6875);
  const float textRegionHeight = float(0.4875);
  const float textRegionWidth = float(0.75);
  const float fontSize = float(0.625);
  const float undoverlineLeftEdge = float(0.125);
  const float undoverlineFirstDotLeftEdge = float(0.1875);
  const float undoverlineDotWidth = float(0.056818181818181816);
  const float undoverlineDotHeight = float(0.0625);
  const float overlineDotTop = float(0.125);
  const float underlineDotTop = float(0.8125);
  std::vector<float> dotCentersAsFractionOfUndoverline = {
    float(0.2159090909090909),
    float(0.2727272727272727),
    float(0.32954545454545453),
    float(0.38636363636363635),
    float(0.4431818181818182),
    float(0.5),
    float(0.5568181818181819),
    float(0.6136363636363636),
    float(0.6704545454545454),
    float(0.7272727272727273),
    float(0.7840909090909091),
  };
};

const float undoverlineWidthOverLength = DieDimensionsMm::undoverlineThickness / DieDimensionsMm::undoverlineLength;


const float minWidthOverLength = undoverlineWidthOverLength / 1.5f;
const float maxWidthOverLength = undoverlineWidthOverLength * 1.5f;

static bool isRectangleShapedLikeUndoverline(RectangleDetected rect) {
	float shortToLongRatio = rect.shorterSideLength / rect.longerSideLength;
	return (
		shortToLongRatio >= minWidthOverLength &&
		shortToLongRatio <= maxWidthOverLength
		);
}

static unsigned char decodeLetterAndDigitByte(uint b, bool isOverline) {
	return isOverline ?
	(
		~(
			( (b & 0xf0) >> 4) |
			( (b & 12) << 2)   |
			( (b & 2) << 5) |
			( (b & 1) << 7)
		)
	)
	:
		b;
}


static uint reverseBits(uint bitsToReverse, uint lengthInBits)
{
	uint reversedBits = 0;
	for (uint i = 0; i < lengthInBits; i++) {
		reversedBits <<= 1;
		if (bitsToReverse & 1) {
			reversedBits += 1;
		}
		bitsToReverse >>= 1;
	}
	return reversedBits;
}

struct decodeUndoverlineBitsResult {
//	bool binaryCodingReadForwardOrBackward
	bool isValid;
	bool wasReadInReverseOrder;
	bool isOverline;
	char letter;
	char digit;
	unsigned char numberOf90DegreeeClockwiseRotationsFromUpright;
};

// Hamming8, first 4 bits
// At least two 1 bits (verified)
// At least two 0 bits (0xfe, 0xf4 in violation)

const uchar EncodeTable[256] = {
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6f, 0xbf, 0xae, 0x3f, 0x2e, 0xfe, 0x0, 0x0, 0x1e, 0xce, 0xdf, 0x4e, 0x5f, 0x8f, 0x0, 0x0, 0x9f, 0x4f, 0x5e, 0xcf, 0xde, 0xe, 0x0, 0x0, 0xba, 0x6a, 0x7b, 0xea, 0xfb, 0x2b, 0x0, 0x0, 0x3b, 0xeb, 0xfa, 0x6b, 0x7a, 0xaa, 0x0, 0x0, 0x4a, 0x9a, 0x8b, 0x1a, 0xb, 0xdb, 0x0, 0x0, 0xcb, 0x1b, 0xa, 0x9b, 0x8a, 0x5a, 0x0, 0x0, 0x7c, 0xac, 0xbd, 0x2c, 0x3d, 0xed, 0x0, 0x0, 0xfd, 0x2d, 0x3c, 0xad, 0xbc, 0x6c, 0x0, 0x0, 0x8c, 0x5c, 0x4d, 0xdc, 0xcd, 0x1d, 0x0, 0x0, 0xd, 0xdd, 0xcc, 0x5d, 0x4c, 0x9c, 0x0, 0x0, 0x28, 0xf8, 0xe9, 0x78, 0x69, 0xb9, 0x0, 0x0, 0xa9, 0x79, 0x68, 0xf9, 0xe8, 0x38, 0x0, 0x0, 0xd8, 0x8, 0x19, 0x88, 0x99, 0x49, 0x0, 0x0, 0x59, 0x89, 0x98, 0x9, 0x18, 0xc8, 0x0, 0x0, 0x26, 0xf6, 0xe7, 0x76, 0x67, 0xb7, 0x0, 0x0, 0xa7, 0x77, 0x66, 0xf7, 0xe6, 0x36, 0x0, 0x0, 0xd6, 0x6, 0x17, 0x86, 0x97, 0x47, 0x0, 0x0, 0x57, 0x87, 0x96, 0x7, 0x16, 0xc6, 0x0, 0x0, 0x72, 0xa2, 0xb3, 0x22, 0x33, 0xe3, 0x0, 0x0, 0xf3, 0x23, 0x32, 0xa3, 0xb2, 0x62, 0x0, 0x0, 0x82, 0x52, 0x43, 0xd2, 0xc3, 0x13, 0x0, 0x0, 0x3, 0xd3, 0xc2, 0x53, 0x42, 0x92, 0x0, 0x0, 0xb4, 0x64, 0x75, 0xe4, 0xf5, 0x25, 0x0, 0x0, 0x35, 0xe5, 0xf4, 0x65, 0x74, 0xa4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
};

const uchar DecodeTable[256] = {
  0x0, 0x0, 0x0, 0xb9, 0x0, 0x0, 0x92, 0x9c, 0x72, 0x7c, 0x3b, 0x35, 0x0, 0x59, 0x1e, 0x0, 0x0, 0x0, 0x0, 0xb6, 0x0, 0x0, 0x9d, 0x93, 0x7d, 0x73, 0x34, 0x3a, 0x0, 0x56, 0x11, 0x0, 0x0, 0x0, 0xa4, 0xaa, 0x0, 0xc6, 0x81, 0x0, 0x61, 0x0, 0x0, 0x26, 0x44, 0x4a, 0xd, 0x0, 0x0, 0x0, 0xab, 0xa5, 0x0, 0xc9, 0x8e, 0x0, 0x6e, 0x0, 0x0, 0x29, 0x4b, 0x45, 0x0, 0xc, 0x0, 0x0, 0xbd, 0xb3, 0x0, 0x0, 0x0, 0x96, 0x0, 0x76, 0x31, 0x0, 0x5d, 0x53, 0x14, 0x1a, 0x0, 0x0, 0xb2, 0xbc, 0x0, 0x0, 0x0, 0x99, 0x0, 0x79, 0x3e, 0x0, 0x52, 0x5c, 0x1b, 0x15, 0x0, 0x0, 0xae, 0x0, 0xc2, 0xcc, 0x8b, 0x85, 0x6b, 0x65, 0x22, 0x2c, 0x4e, 0x0, 0x0, 0x9, 0x0, 0x0, 0xa1, 0x0, 0xcd, 0xc3, 0x84, 0x8a, 0x64, 0x6a, 0x2d, 0x23, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb1, 0x0, 0x0, 0x0,
0x94, 0x9a, 0x74, 0x7a, 0x3d, 0x33, 0x51, 0x0, 0x0, 0x16, 0x0, 0x0, 0xbe, 0x0, 0x0, 0x0, 0x9b, 0x95, 0x7b, 0x75, 0x32, 0x3c, 0x5e, 0x0, 0x0, 0x19, 0x0, 0x0, 0xa2, 0xac, 0xce, 0x0, 0x0, 0x89, 0x0, 0x69, 0x2e, 0x0, 0x42, 0x4c, 0xb, 0x0, 0x0, 0x0, 0xad, 0xa3, 0xc1, 0x0, 0x0, 0x86, 0x0, 0x66, 0x21, 0x0, 0x4d, 0x43, 0x0, 0xa, 0x0, 0x0, 0xbb, 0xb5, 0x0, 0x0, 0x9e, 0x0, 0x7e, 0x0, 0x0, 0x39, 0x5b, 0x55, 0x12, 0x1c, 0x0, 0x0, 0xb4, 0xba, 0x0, 0x0, 0x91, 0x0, 0x71, 0x0, 0x0, 0x36, 0x54, 0x5a, 0x1d, 0x13, 0x0, 0x0, 0x0, 0xa6, 0xc4, 0xca, 0x8d, 0x83, 0x6d, 0x63, 0x24, 0x2a, 0x0, 0x46, 0x0, 0x0, 0x0,
0x0, 0x0, 0xa9, 0xcb, 0xc5, 0x82, 0x8c, 0x62, 0x6c, 0x2b, 0x25, 0x0, 0x49, 0xe, 0x0
};

static decodeUndoverlineBitsResult decodeUndoverlineBits(uint binaryCodingReadForwardOrBackward, bool isVertical) {
	decodeUndoverlineBitsResult result;
	result.isValid = false;
	result.letter = 0;
	result.digit = 0;
	result.numberOf90DegreeeClockwiseRotationsFromUpright = 0;
	result.wasReadInReverseOrder = 0;

	bool decodeErrorPresent = false;

	// The binary coding has 11 bits,
	// from most significant (10) to least (0)
	//   Bit 10:   always 1
	//   Bit  9:   1 if overline, 0 if underline
	//   Bits 8-1: byte encoding letter and digit
	//   Bit  0:   always 0

	// First, we need to determine if we read the code in the
	// forward order (the first bit is 1) or the reverse order
	// (such that the last bit is 1).
	const bool firstBitRead = ( binaryCodingReadForwardOrBackward >> (NumberOfDotsInUndoverline - 1) ) == 1;
	const bool lastBitRead = binaryCodingReadForwardOrBackward & 1;
	if ( (firstBitRead ^ lastBitRead) != 1 ) {
		// The direction bit is a white box at the left (starting) edge
		// of the underline.
		// Thus, either the first or last bit should be set to 1,
		// but never neither or both.
		result.isValid = false;
		return result;
	}

	result.wasReadInReverseOrder = lastBitRead;

	result.numberOf90DegreeeClockwiseRotationsFromUpright = isVertical ? (
			// vertical
			result.wasReadInReverseOrder ? 3 : 1
		) : (
			// horizontal
			result.wasReadInReverseOrder ? 2 : 0
	);

	// Get the bits in the correct order, with the lowest-order
	// bit 0 (the always-black last bit in the underline)
	const uint binaryEncoding = result.wasReadInReverseOrder ?
		reverseBits(binaryCodingReadForwardOrBackward, 11) : binaryCodingReadForwardOrBackward;

	result.isOverline = (binaryEncoding >> 9) & 1;

	const unsigned char letterDigitByte =
		decodeLetterAndDigitByte((binaryEncoding >> 1) & 0xff, result.isOverline);

	const uchar letterCode = (letterDigitByte >> 3) & 0x1f;
	const uchar digitCode = letterDigitByte & 0x7;
	if ( (letterCode < 1) || (letterCode > DieLetters.length() ) )  {
		decodeErrorPresent = true;
	} else {
		result.letter = DieLetters[letterCode - 1];
	}

	if ( (digitCode < 1) || (digitCode > DieDigits.length() ) ) {
		decodeErrorPresent = true;
	} else {
		result.digit = DieDigits[digitCode - 1];
	}

	result.isValid = !decodeErrorPresent;
	return result;
}