#pragma once
#include "derived-key.hpp"
#include "message.hpp"

class SymmetricKey : KeySqrDerivedKey {
  public:
  SymmetricKey(
    const KeySqr<Face> &keySqr,
    const std::string &keyDerivationOptionsJson,
    const std::string &clientsApplicationId = ""
  );

  /**
   *
   * LibSodium's crypto_secretbox_easy construct isn't THAT easy.
   * The caller must store both the ciphertext AND a 24-byte nonce
   * (crypto_secretbox_NONCEBYTES = 24).
   * 
   * This seal operation outputs a _composite_ ciphertext containing the
   * nonce followed by the "secret box" ciphertext generated by LibSodium.
   * Since the "secret box" is 16 bytes longer than the message size
   * (crypto_secretbox_MACBYTES = 16),
   * the composite ciphertext is is 40 bytes longer than the message length
   * (24 for then nonce, plus the 16 added to create the secret box)
   */
  const std::vector<unsigned char> seal(
    const unsigned char* message,
    const size_t messageLength,
    const std::string &postDecryptionInstructionsJson = ""
  ) const;

  const std::vector<unsigned char> seal(
    const SodiumBuffer &message,
    const std::string &postDecryptionInstructionsJson = ""
  ) const;
  
  const std::vector<unsigned char> seal(
    const Message &message
  ) const;

  const Message unseal(
    const unsigned char* compositeCiphertext,
    const size_t compositeCiphertextLength,
    const std::string &postDecryptionInstructionsJson = ""
  ) const;

  const Message unseal(
    const std::vector<unsigned char> &compositeCiphertext,
    const std::string& postDecryptionInstructionsJson = ""
  ) const;

};